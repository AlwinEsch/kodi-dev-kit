find_package(CrossGUID REQUIRED)

set(kodidevkit_LIB_INCLUDE_DIRS
  ${PROJECT_SOURCE_DIR}/include
  ${PROJECT_SOURCE_DIR}/include/kodi
)

include_directories(
  ${kodidevkit_LIB_INCLUDE_DIRS}
)

set(kodidevkit_LIB_SRCS_NOAUTO
  ${PROJECT_SOURCE_DIR}/src/Addon.cpp
  ${PROJECT_SOURCE_DIR}/src/AddonBase.cpp
  ${PROJECT_SOURCE_DIR}/src/tools.cpp
  ${PROJECT_SOURCE_DIR}/src/SharedMemory.cpp
  ${PROJECT_SOURCE_DIR}/src/SharedMemoryPosix.cpp
)

set(kodidevkit_LIB_SRCS
  ${kodidevkit_LIB_SRCS_NOAUTO}
# autogenerated version file
)

# if(JSONPLAT)
#   find_package(JSON-C QUIET)
#   if(${JSON-C_FOUND})
#     set(kodidevkit_LIB_SRCS_NOAUTO
#       ${kodidevkit_LIB_SRCS_NOAUTO}
#       ${PROJECT_SOURCE_DIR}/src/json/jsonplatform.c
#     )
#   endif()
# endif()

set (kodidevkit_LIBS ${CMAKE_THREAD_LIBS_INIT}
                     ${CROSSGUID_LIBRARIES})

if(X86PLAT)
  add_subdirectory(x86)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DX86PLAT=1")
endif()

if(ARMPLAT)
  add_subdirectory(arm)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DARMPLAT=1")
endif()

set(LIB_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}" CACHE PATH "Installation path for libraries")

install(FILES ${kodidevkit_LIB_GLOB_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

macro(kodidevkit_CREATE_INSTALL_PKGCONFIG generated_file install_location)
  configure_file(${generated_file}.cmake ${CMAKE_CURRENT_BINARY_DIR}/${generated_file} @ONLY)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${generated_file} DESTINATION ${install_location})
endmacro(kodidevkit_CREATE_INSTALL_PKGCONFIG)
kodidevkit_create_install_pkgconfig (kodidevkit.pc ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

macro(kodidevkit_CREATE_INSTALL_PKGCONFIG generated_file install_location)
  configure_file(${generated_file}.cmake ${CMAKE_CURRENT_BINARY_DIR}/${generated_file} @ONLY)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${generated_file} DESTINATION ${install_location})
endmacro(kodidevkit_CREATE_INSTALL_PKGCONFIG)
kodidevkit_create_install_pkgconfig(kodidevkit.pc ${LIB_INSTALL_DIR}/pkgconfig)

if(DOXYGEN_FOUND)
  set (CMAKE_SWIG_FLAGS -DDOXYGEN=${DOXYGEN_FOUND})
#  set (DOCCLASSES aio gpio i2c pwm spi uart)
#  # CPP class headers
#  foreach (_file ${DOCCLASSES})
#    add_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${_file}_class_doc.i
#      COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doxy2swig.py -n
#        ${CMAKE_BINARY_DIR}/xml/classkodidevkit_1_1_${_file}.xml
#        ${CMAKE_CURRENT_BINARY_DIR}/${_file}_class_doc.i
#      DEPENDS ${CMAKE_BINARY_DIR}/xml/classkodidevkit_1_1_${_file}.xml
#    )
#    add_custom_target (${_file}class_doc_i DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${_file}_class_doc.i)
#    add_dependencies (${_file}class_doc_i doc)
#  endforeach ()
#  # C header files
#  set (DOCFILES common ${DOCCLASSES})
#  foreach (_file ${DOCFILES})
#    add_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${_file}_doc.i
#      COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doxy2swig.py -n
#        ${CMAKE_BINARY_DIR}/xml/${_file}_8h.xml
#        ${CMAKE_CURRENT_BINARY_DIR}/${_file}_doc.i
#      DEPENDS ${CMAKE_BINARY_DIR}/xml/${_file}_8h.xml
#    )
#    add_custom_target (${_file}doc_i DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${_file}_doc.i)
#    add_dependencies (${_file}doc_i doc)
#  endforeach ()
#  # CPP common header
#  add_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/common_hpp_doc.i
#    COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doxy2swig.py -n
#      ${CMAKE_BINARY_DIR}/xml/common_8hpp.xml
#      ${CMAKE_CURRENT_BINARY_DIR}//common_hpp_doc.i
#    DEPENDS ${CMAKE_BINARY_DIR}/xml/common_8hpp.xml
#  )
#  add_custom_target (common_hpp_doc_i DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/common_hpp_doc.i)
#  add_dependencies (common_hpp_doc_i doc)
endif()

if(BUILDSWIG)
  enable_language(CXX)
  find_package(SWIG)
  if(SWIG_FOUND)
    include(${SWIG_USE_FILE})
    set_source_files_properties(kodidevkit.i PROPERTIES SWIG_FLAGS "-I${CMAKE_BINARY_DIR}/src")
    if(BUILDSWIGPYTHON)
      add_subdirectory(python)
    endif()
    if(BUILDSWIGJAVA)
      configure_file (${CMAKE_CURRENT_SOURCE_DIR}/java/manifest.txt.in
          ${CMAKE_CURRENT_BINARY_DIR}/java/manifest.txt)
      configure_file (${CMAKE_CURRENT_SOURCE_DIR}/java/pom.xml.in
          ${CMAKE_CURRENT_BINARY_DIR}/java/kodidevkit-${VERSION_SHORT}.pom)
      add_subdirectory(java)
    endif()
    if(BUILDSWIGLUA)
      add_subdirectory(lua)
    endif()
    if(BUILDSWIGNODE)
      if(SWIG_VERSION VERSION_GREATER 3.0.4)
        add_subdirectory (javascript)
      else()
        message("WARN - SWIG is ${SWIG_VERSION}. Please upgrade to 3.0.5+ to build nodejs addon")
      endif()
    endif()
  endif()
endif()

add_library(kodidevkit ${kodidevkit_LIB_SRCS})
target_link_libraries(kodidevkit ${kodidevkit_LIBS})
set_target_properties(
   kodidevkit
   PROPERTIES
   SOVERSION ${kodidevkit_VERSION_MAJOR}
   VERSION ${kodidevkit_VERSION_STRING}
)

if(MSYS)
  # Under MSYS we have to put our generated DLL into bin, otherwise it's not picked up
  install(TARGETS kodidevkit DESTINATION ${CMAKE_INSTALL_BINDIR})
else()
  install(TARGETS kodidevkit DESTINATION ${LIB_INSTALL_DIR})
endif()
